class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int n = wordList.size();
        unordered_set<string> wordMap;
        for (auto word : wordList) wordMap.insert(word);

        queue<string> q;
        q.push(beginWord);
        unordered_map<string, int> dist;
        dist[beginWord] = 1;
        int count = 0;
        while (!q.empty()) {
            string s = q.front(); q.pop();
            for (int i = 0; i < s.size(); i++) {
                string t = s;
                for (char j = 'a'; j <= 'z'; j++) {
                    if (t[i] == j) continue;
                    t[i] = j;
                    if (wordMap.count(t) && !dist.count(t)) {
                        dist[t] = dist[s] + 1;
                        if (t == endWord) return dist[t];
                        q.push(t);
                    }
                }
            }
        }
        return 0;
    }
};
