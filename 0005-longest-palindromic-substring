/*

babab cbba 
babab

*/


class Solution {
public:
    // 中心扩散
    string longestPalindrome1(string s) {
        int n = s.size();
        string res = "";
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= 1; j++) {
                int len = j - 1;
                int left = i, right = i + j;
                while (left >= 0 && right < n && s[left] == s[right]) {
                    len += 2;
                    left--, right++;
                }
                if (res.size() < len) res = s.substr(left + 1, len);
            }
        }
        return res;
    }
    // dp 很慢
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<bool>> f(n, vector<bool>(n));
        string res = "";
        for (int len = 0; len < n; len++) {
            for (int i = 0; i + len < n; i++) {
                int j = i + len;
                if (len == 0) f[i][j] = 1;
                else if (len == 1) f[i][j] = s[i] == s[j];
                else f[i][j] = f[i + 1][j - 1] && s[i] == s[j];
                if (f[i][j] && res.size() < len + 1) res = s.substr(i, len + 1);
            }
        }
        return res;
    }

    // todo. manacher 
    string longestPalindrome3(string s) {
        return "";
    }
};
