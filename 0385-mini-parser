/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    NestedInteger deserialize(string s) {
        if (s[0] != '[') return NestedInteger(atoi(s.c_str()));
        stack<NestedInteger> st;
        int n = s.size();
        string num;
        NestedInteger ans;
        for (int i = 0; i < n; i++) {
            char ch = s[i];
            if (ch == '[') st.push(NestedInteger());
            else if (ch == ']') {
                ans = st.top(); st.pop();
                if (num.size() > 0) {
                    ans.add(NestedInteger(atoi(num.c_str())));
                    num.clear();
                }
                if (st.size() > 0) {
                    st.top().add(ans);
                }
            } else if (ch == ',') {
                if (num.size() > 0) {
                    st.top().add(NestedInteger(atoi(num.c_str())));
                    num.clear();
                }
            } else {
                num += ch;
            }
        }
        return ans;
    }
};
