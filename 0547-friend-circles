class Solution {
public:
    vector<int> par;
    int n, m;
    int cnt = 0;

    int find(int x) {
        return x == par[x] ? x : par[x] = find(par[x]);
    }
    void merge(int x, int y) {
        int a = find(x), b = find(y);
        if (a == b) return;
        par[b] = a;
        cnt--;
    }
    int count() {
        return cnt;
    }

    int findCircleNum(vector<vector<int>>& M) {
        n = M.size(), m = M[0].size();
        par.resize(n * m);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == j && M[i][j] == 1) {
                    par[i] = i;
                    cnt++;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (M[i][j] == 0 || i == j) continue;
                merge(i, j);
            }
        }
        return cnt;
    }
};
