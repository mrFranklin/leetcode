class Solution {
public:
    void backtrace(vector<int>& nums, int start, vector<int>& memo, vector<vector<int>>& res) {
        if (memo.size() == nums.size()) {
            res.push_back(memo);
            return;
        }
        unordered_set<int> visited;
        for (int i = start; i < nums.size(); i++) {
            if (visited.count(nums[i])) continue;
            visited.insert(nums[i]);
            
            swap(nums[start], nums[i]);
            memo.push_back(nums[start]);
            backtrace(nums, start + 1, memo, res);
            memo.pop_back();
            swap(nums[start], nums[i]);
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> memo;
        int n = nums.size();
        backtrace(nums, 0, memo, res);
        return res;
    }
};
