/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // dfs
    TreeNode* dfs(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == NULL || root == p || root == q) return root;
        TreeNode* left = dfs(root->left, p, q);
        TreeNode* right = dfs(root->right, p, q);
        if (left == NULL) {
            return right;
        }
        if (right == NULL) {
            return left;
        }
        if (left && right) {
            return root;
        }
        return NULL;
    }

    TreeNode* lowestCommonAncestor1(TreeNode* root, TreeNode* p, TreeNode* q) {
        return dfs(root, p, q);
    }

    void dfsTravel(TreeNode* root, unordered_map<int, TreeNode*> &parent) {
        if (!root) return;
        if (root->left) {
            parent[root->left->val] = root;
            dfsTravel(root->left, parent);
        }
        if (root->right) {
            parent[root->right->val] = root;
            dfsTravel(root->right, parent);
        }
    }

    // 记录父节点
    unordered_map<int, TreeNode*> parent;
    unordered_map<int, TreeNode*> pMap;
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        dfsTravel(root, parent);
        
        TreeNode* cur = p;
        while (cur) {
            pMap[cur->val] = cur;
            cur = parent[cur->val];
        }
        cur = q;
        while (cur) {
            if (pMap[cur->val]) {
                return cur;
            }
            cur = parent[cur->val];
        }
        return NULL;
    }
};
