class Solution {
public:
    // first, ugly
    void nextPermutation1(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return;
        int i = n - 1;
        for (; i >= 1; i--) {
            if (nums[i] > nums[i - 1]) {
                int k = i;
                for (int j = n - 1; j >= i + 1; j--) {
                    if (nums[j] > nums[i - 1]) {
                        k = j;
                        break;
                    }
                }
                swap(nums[i - 1], nums[k]);
                for (int j = i; j < (i + n) / 2; j++) {
                    swap(nums[j], nums[n - 1 - (j - i)]);
                }
                break;
            }
        }
        if (i == 0) {
            for (int j = 0; j < n / 2; j++) {
                swap(nums[j], nums[n - 1 - j]);
            }
        }
    }

    // 重构
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return;
        int i = n - 1;
        while (i >= 1 && nums[i] <= nums[i - 1]) {
            i--;
        }
        if (i > 0) {
            int j = n - 1;
            while (j >= i && nums[j] <= nums[i - 1]) {
                j--;
            }
            swap(nums[i - 1], nums[j]);
        }
        for (int j = i; j < (i + n) / 2; j++) {
            swap(nums[j], nums[n - 1 - (j - i)]);
        }
    }
};
