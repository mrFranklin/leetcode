class Solution {
public:
    void dfs(vector<int>& nums, int start, vector<int>& memo, vector<vector<int>>& res) {
        res.push_back(memo);
        for (int i = start; i < nums.size(); i++) {
            if (i > start && nums[i] == nums[i - 1]) continue;
            memo.push_back(nums[i]);
            dfs(nums, i + 1, memo, res);
            memo.pop_back();
        }
    }
    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        vector<int> memo;
        vector<vector<int>> res;
        dfs(nums, 0, memo, res);
        return res;
    }
};
