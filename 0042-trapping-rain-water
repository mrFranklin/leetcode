class Solution {
public:
    int calcWater(vector<int>& height, int left, int right) {
        int res = 0;
        res += min(height[left], height[right]) * (right - left - 1);
        // cout<<res<<" "<<left<<" "<<right<<endl;
        for (int i = left + 1; i < right; i++) res -= height[i];
        return res;
    }
    // ugly
    int trap1(vector<int>& height) {
        int n = height.size();
        int res = 0;
        int left = 0, right = 0;
        while (right < n && height[right] == 0) {
            right++;
        }
        left = right;
        while (right < n) {
            if (height[left] <= height[right]) {
                if (right - left >= 2) {
                    res += calcWater(height, left, right);
                }
                left = right;
            }
            right++;
        }
        // cout<<res<<" "<<left<<" "<<right<<endl;
        right = n - 1;
        if (left < right && right - left >= 2) {            
            int t = left;
            left = right;
            while (left >= t) {
                // cout<<"---"<<left<<" "<<right<<endl;
                if (height[left] >= height[right]) {
                    if (right - left >= 2) {
                        res += calcWater(height, left, right);
                    }
                    right = left;
                }
                left--;
            }
        }

        return res;
    }
    // 双指针
    int trap2(vector<int>& height) {
        int n = height.size();
        int left = 0, right = n - 1;
        int maxLeft = 0, maxRight = 0;
        int res = 0;
        while (left <= right) {
            if (maxLeft < maxRight) {  // 也可以比较 height[left], height[right]
                if (maxLeft <= height[left]) maxLeft = height[left];
                else res += maxLeft - height[left];
                left++;
            } else {
                if (maxRight <= height[right]) maxRight = height[right];
                else res += maxRight - height[right];
                right--;
            }
        }
        return res;
    }

    // stack
    int trap(vector<int>& height) {
        int n = height.size();
        if (n <= 1) return 0;
        stack<int> st;
        st.push(0);
        int cur = 1, res = 0;
        while (cur < n) {
            while (height[st.top()] < height[cur]) {
                int i = st.top();
                st.pop();
                if (st.empty()) break;
                res += (min(height[st.top()], height[cur]) - height[i]) * (cur - st.top() - 1);
            }
            st.push(cur++);
        }
        return res;
    }
};
