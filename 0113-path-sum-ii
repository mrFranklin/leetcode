/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int sum, vector<TreeNode*> &cache, vector<vector<int>> &ans) {
        if (root == NULL) return;
        if (root->left == NULL && root->right == NULL) {
            if (root->val == sum) {
                vector<int> vec;
                for (TreeNode* node : cache) {
                    vec.push_back(node->val);
                }
                vec.push_back(root->val);
                ans.push_back(vec);
            }
            return;
        }
        cache.push_back(root);
        dfs(root->left, sum - root->val, cache, ans);
        dfs(root->right, sum - root->val, cache, ans);
        cache.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> ans;
        vector<TreeNode*> cache;
        dfs(root, sum, cache, ans);

        return ans;
    }
};
