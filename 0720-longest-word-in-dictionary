class Solution {
public:
    // hashmap暴露法，性能差
    string longestWord1(vector<string>& words) {
        unordered_map<string, bool> m;
        for (int i = 0; i < words.size(); i++) {
            string word = words[i];
            m[word] = true;
        }
        int max = 0;
        vector<string> vec;
        for (int i = 0; i < words.size(); i++) {
            string word = words[i];
            bool existed = true;
            for (int j = word.size()-1; j > 0; j--) {
                if (!m.count(word.substr(0, j))) {
                    existed = false;
                    break;
                }
            }
            if (!existed) continue;
            if (max > word.size()) {
                continue;
            } else if (max == word.size()) {
                vec.push_back(word);
                int j;
                for (j = vec.size()-2; j >= 0; j--) {
                    if (vec[j] > word) {
                        vec[j+1] = vec[j];
                    } else {
                        break;
                    }
                }
                vec[j+1] = word;
            } else {
                vec.clear();
                vec.push_back(word);
                max = word.size();
            }
        }

        return vec.size() > 0 ? vec[0] : "";
    }

    static bool cmp (string &x, string &y) {
        return x.size() == y.size() ? x < y : x.size() > y.size();
    }
    // hashmap, 先将words排序,好技巧！
    // todo. 最优解法trie树
    string longestWord(vector<string>& words) {
        unordered_set<string> m;
        sort(words.begin(), words.end(), cmp);
        for (string word : words) {
            m.insert(word);
        }
        for (string word : words) {
            int i;
            for (i = 1; i < word.size(); i++) {
                string w = word.substr(0, i);
                if (!m.count(w)) {
                    break;
                }
            }
            if (i == word.size()) {
                return word;
            }
        }

        return "";
    }
};
