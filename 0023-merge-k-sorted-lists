/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

struct cmp {
    bool operator() (ListNode* a, ListNode* b) {
        return a->val > b->val;
    }
};

class Solution {
public:
    // 方法1：heap
    ListNode* mergeKLists1(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, cmp> pq;
        for (int i = 0; i < lists.size(); i++) {
            ListNode* p = lists[i];
            while (p) {
                pq.push(p);
                p = p->next;
            }
        }
        ListNode* dummy = new ListNode(-1);
        ListNode* p = dummy;
        while (!pq.empty()) {
            p->next = pq.top();
            pq.pop();
            p = p->next;
            cout<<p->val<<" ";
        }
        p->next = NULL;  // 不加这句会报heap错误，诡异
        return dummy->next;
    }

    ListNode* merge2Lists(ListNode* list1, ListNode* list2) {
        ListNode dummy;
        ListNode* p = &dummy;
        while (list1 && list2) {
            if (list1->val < list2->val) {
                p->next = list1;
                list1 = list1->next;
            } else {
                p->next = list2;
                list2 = list2->next;
            }
            p = p->next;
        }
        if (list1) p->next = list1;
        if (list2) p->next = list2;
        
        return dummy.next;
    }

    ListNode* mergeLists(vector<ListNode*>& lists, int start, int end) {
        if (start >= end) return lists[start];
        int mid = start + (end - start) / 2;
        ListNode* l1 = mergeLists(lists, start, mid);
        ListNode* l2 = mergeLists(lists, mid+1, end);
        return merge2Lists(l1, l2);
    }
    
    // 方法2：分治，二分
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() == 0) return NULL;
        return mergeLists(lists, 0, lists.size() - 1);
    }
};
