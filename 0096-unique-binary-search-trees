class Solution {
public:
    int numTrees(int start, int end, vector<vector<int>>& mem) {
        if (start >= end) return 1;
        if (mem[start][end] != 0) return mem[start][end];
        int res = 0;
        for (int i = start; i <= end; i++) {
            res += numTrees(start, i - 1, mem) * numTrees(i + 1, end, mem);
        }
        mem[start][end] = res;
        return res;
    }
    // 递归+记忆化搜索
    int numTrees1(int n) {
        vector<vector<int>> mem(n + 1, vector<int>(n + 1));
        return numTrees(1, n, mem);
    }

    // 卡特兰数公式
    // C(n) = c(2n, n) / (n + 1)
    // C(n+1) = (2 * (2n + 1) / (n + 2)) * C(n)
    // C(n) = (2 * 2n - 1) / (n + 1) * C(n - 1)
    // 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190

    /*
        h（0）=1，h（1）=1
        h(n)=h(0)∗h(n−1)+h(1)∗h(n−2)+...+h(n−1)∗h(0)　(n>=2)
    */
    int numTrees2(int n) {
        long long c = 1;
        for (int i = 0; i < n; i++) {
            c = c * (4 * i + 1) / (i + 2);
        }
        return c;
    }

    // dp
    int numTrees(int n) {
        vector<int> f(n + 1);
        f[0] = 1; 
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                f[i] += f[j - 1] * f[i - j];
            }
        }

        return f[n];
    }
};
