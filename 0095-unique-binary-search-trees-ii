/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* getTree(vector<int> nums, int start) {
        if (nums.size() == 0 || start >= nums.size()) return nullptr;
        TreeNode* root = new TreeNode(nums[start]);
        root->left = getTree(nums, start * 2 + 1);
        root->right = getTree(nums, start * 2 + 2);
        return root;
    }

    // 递归+记忆化搜索
    vector<TreeNode*> dfs(int start, int end, vector<vector<vector<TreeNode*>>>& memo) {
        if (start > end) return {nullptr};
        else if (start == end) return { new TreeNode(start) };
        
        if (memo[start][end].size() > 0) return memo[start][end];

        vector<TreeNode*> res;
        for (int i = start; i <= end; i++) {
            auto left = dfs(start, i - 1, memo);
            auto right = dfs(i + 1, end, memo);
            for (int j = 0; j < left.size(); j++) {
                for (int k = 0; k < right.size(); k++) {
                    TreeNode *root = new TreeNode(i);
                    root->left = left[j], root->right = right[k];
                    res.push_back(root);
                }
            }
        }
        memo[start][end] = res;
        return res;
    }

    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) return {};
        vector<vector<vector<TreeNode*>>> memo(n + 1, vector<vector<TreeNode*>>(n + 1));
        return dfs(1, n, memo);
    }
};
