/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // bfs
    vector<int> rightSideView1(TreeNode* root) {
        if (root == NULL) return {};
        queue<TreeNode*> q;
        q.push(root);
        vector<int> res;
        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; i++) {
                auto node = q.front(); q.pop();
                if (i == 0) res.push_back(node->val);
                if (node->right) q.push(node->right);
                if (node->left) q.push(node->left);
            }
        }
        return res;
    }

    unordered_set<int> st;
    // dfs
    void dfs(TreeNode* root, int height, vector<int>& res) {
        if (root == NULL) return;
        if (!st.count(height)) {
            st.insert(height);
            res.push_back(root->val);
        }
        if (root->right) dfs(root->right, height + 1, res);
        if (root->left) dfs(root->left, height + 1, res);
    }

    vector<int> rightSideView(TreeNode* root) {
        if (root == NULL) return {};
        vector<int> res;
        dfs(root, 0, res);
        return res;
    }
};
