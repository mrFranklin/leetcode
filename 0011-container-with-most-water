class Solution {
public:
    int maxArea1(vector<int>& height) {
        if (height.size() <= 1) {
            return 0;
        }
        int left = 0, right = height.size() - 1;
        int ans = 0;
        bool moveLeft = false;
        bool init = true;
        while (left < right) {
            // optimise here
            if (init 
                || moveLeft && left - 1 >= 0 && height[left] > height[left-1]
                || !moveLeft && right + 1 < height.size() && height[right] > height[right+1]) {
                ans = max(ans, (right - left) * (height[left] < height[right] ? height[left] : height[right]));
                if (init) {
                    init = false;
                }
            }
            if (height[left] < height[right]) {
                left++;
                moveLeft = true;
            } else {
                right--;
                moveLeft = false;
            }
        }
        return ans;
    }

    int maxArea(vector<int>& height) {
        int n = height.size();
        int left = 0, right = n - 1;
        int res = 0;
        while (left < right) {
            res = max(res, min(height[left], height[right]) * (right - left));
            if (height[left] < height[right]) {
                // if (left + 1 < right && height[left] >= height[left + 1]) {
                //     while (left + 1 < right && height[left] >= height[left + 1]) left++;
                // } else {
                    left++;
                // }
            } else {
                // if (left < right - 1 && height[right] >= height[right - 1]) {
                //     while (left < right - 1 && height[right] >= height[right - 1]) right--;
                // } else {
                    right--;
                // }
                
            }
        }
        return res;
    }
};
