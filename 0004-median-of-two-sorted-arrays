/*
1, 2, 8
3, 4, 5

find num 
1, 2, 5, 6
3, 4, 7

--> find 2
5, 6
3, 4, 7

-> f 1
5, 6
4, 7

1,3,4
2,5,6
*/
class Solution {
public:
    vector<int> search(vector<int>& nums1, vector<int>& nums2, int s1, int e1, int s2, int e2, int mid, int len) {
        if (s1 > e1) {
            if (len == 1) return {nums2[s2 + mid - 1]};
            else return {nums2[s2 + mid - 1], nums2[s2 + mid]};
        } else if (s2 > e2) {
            if (len == 1) return {nums1[s1 + mid - 1]};
            else return {nums1[s1 + mid - 1], nums1[s1 + mid]};
        }
        if (mid == 0) return {0};
        else if (mid == 1) {
            int d = nums1[s1] < nums2[s2] ? nums1[s1] : nums2[s2];
            // cout<<"mid=1"<<" "<<s1<<" "<<e1<<" "<<s2<<" "<<e2<<" "<<d<<" "<<len<<endl;
            if (len == 1) return {d};
            else {
                int d2;
                if (nums1[s1] < nums2[s2]) {
                    if (s1 < e1) d2 = nums1[s1 + 1] < nums2[s2] ? nums1[s1 + 1] : nums2[s2];
                    else d2 = nums2[s2];
                } else {
                    if (s2 < e2) d2 = nums1[s1] < nums2[s2 + 1] ? nums1[s1] : nums2[s2 + 1];
                    else d2 = nums1[s1];
                }
                return {d, d2};
            }
        }
        int mid1 = s1 + mid / 2 - 1;
        int mid2 = s2 + mid / 2 - 1;
        // cout<<mid<<" "<<mid1<<" "<<mid2<<endl;
        if (mid1 < s1) {
            mid1 = s1;
        } else if (mid1 > e1) {
            mid1 = e1;
        } else if (mid2 < s2) {
            mid2 = s2;
        } else if (mid2 > e2) {
            mid2 = e2;
        }
        if (nums1[mid1] < nums2[mid2]) {
            return search(nums1, nums2, mid1 + 1, e1, s2, e2, mid - (mid1 - s1 + 1), len);
        } else {
            return search(nums1, nums2, s1, e1, mid2 + 1, e2, mid - (mid2 - s2 + 1), len);
        }
    }
    // mine, ugly
    double findMedianSortedArrays2(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        if (n1 == 0 && n2 == 0) return 0.0;
        int mid = (n1 + n2 + 1) / 2;
        int len = (n1 + n2) % 2 == 0 ? 2 : 1;
        auto v = search(nums1, nums2, 0, n1 - 1, 0, n2 - 1, mid, len);
        return v.size() == 1 ? v[0] / 1.0 : (v[0] + v[1]) / 2.0;
    }

    int findKth(vector<int>& nums1, vector<int>& nums2, int s1, int e1, int s2, int e2, int k) {
        int len1 = e1 - s1 + 1;
        int len2 = e2 - s2 + 1;
        if (len1 > len2) return findKth(nums2, nums1, s2, e2, s1, e1, k);
        if (len1 == 0) return nums2[s2 + k - 1];
        if (k == 1) return min(nums1[s1], nums2[s2]);

        int i1 = s1 + min(len1, k / 2) - 1;
        int i2 = s2 + min(len2, k / 2) - 1;
        if (nums1[i1] < nums2[i2]) {
            return findKth(nums1, nums2, i1 + 1, e1, s2, e2, k - (i1 - s1 + 1));
        } else {
            return findKth(nums1, nums2, s1, e1, i2 + 1, e2, k - (i2 - s2 + 1));
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        if (n1 == 0 && n2 == 0) return 0.0;
        int k1 = (n1 + n2 + 1) / 2;
        int k2 = (n1 + n2 + 2) / 2;
        return (findKth(nums1, nums2, 0, n1 - 1, 0, n2 - 1, k1) + findKth(nums1, nums2, 0, n1 - 1, 0, n2 - 1, k2)) / 2.0;
    }
};
