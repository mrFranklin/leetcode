int idx(int x, int y, int col) {
    return x * col + y;
}

class Solution {
public:
    int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
    vector<vector<bool>> vis;
    int n, m;
    void dfs(vector<vector<char>>& grid, int i, int j) {
        if (vis[i][j]) return;
        vis[i][j] = true;
        for (int k = 0; k < 4; k++) {
            int ii = i + dx[k], jj = j + dy[k];
            if (ii < 0 || ii >= n || jj < 0 || jj >= m) continue;
            if (grid[ii][jj] == '1') dfs(grid, ii, jj);
        }
    }
    // dfs
    int numIslands1(vector<vector<char>>& grid) {
        if (grid.size() == 0) return 0;
        n = grid.size(), m = grid[0].size();
        vis.resize(n);
        for (int i = 0; i < n; i++) vis[i].resize(m);
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '0' || vis[i][j]) continue;
                dfs(grid, i, j);
                res++;
            }
        }
        return res;
    }

    struct Point {
        int x, y;
        Point(int x, int y) {
            this->x = x, this->y = y;
        }
    };
    // bfs
    int numIslands2(vector<vector<char>>& grid) {
        if (grid.size() == 0) return 0;
        n = grid.size(), m = grid[0].size();
        vis.resize(n);
        for (int i = 0; i < n; i++) vis[i].resize(m);
        int res = 0;
        
        queue<Point> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '0' || vis[i][j]) continue;
                q.push(Point(i, j));
                while (!q.empty()) {
                    auto p = q.front(); q.pop();
                    if (vis[p.x][p.y]) continue;
                    vis[p.x][p.y] = true;
                    for (int k = 0; k < 4; k++) {
                        int ii = p.x + dx[k], jj = p.y + dy[k];
                        if (ii < 0 || ii >= n || jj < 0 || jj >= m) continue;
                        if (grid[ii][jj] == '1' && !vis[ii][jj]) q.push(Point(ii, jj));
                    }
                }
                res++;
            }
        }
        return res;
    }


    struct UF {
        int cnt;
        vector<int> par;
        vector<int> rnk;

        UF(vector<vector<char>>& grid) {
            int n = grid.size(), m = grid[0].size();
            int sz = n * m;
            par.resize(sz);
            rnk.resize(sz);
            cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    int id = idx(i, j, m);
                    if (grid[i][j] == '1') {
                        par[id] = id;
                        rnk[id] = 1;
                        cnt++;
                    }
                }
            }
        }

        int find(int id) {
            return id == par[id] ? id : par[id] = find(par[id]);
        }

        void merge(int a, int b) {
            a = find(a), b = find(b);
            if (a == b) return;
            if (rnk[a] < rnk[b]) {
                par[a] = b;
            } else {
                par[b] = a;
                rnk[a] += rnk[a] == rnk[b];
            }
            cnt--;
        }

        int count() {
            return cnt;
        }
    };

    int d[3] = {0, 1, 0};
    // union find
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size() == 0) return 0;
        n = grid.size(), m = grid[0].size();
        UF uf(grid);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '0') continue;
                for (int k = 0; k < 2; k++) {
                    int a = i + d[k], b = j + d[k + 1];
                    if (a < 0 || a >= n || b < 0 || b >= m || grid[a][b] == '0') continue;
                    uf.merge(idx(i, j, m), idx(a, b, m));
                }
            }
        }
        return uf.count();
    }
};
