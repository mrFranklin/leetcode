struct Node {
    int x, y, h;
    bool operator< (const Node& n) const {
        return h > n.h;
    }
    Node(int x, int y, int h) {
        this->x = x, this->y = y, this->h = h;
    }
};
class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int n = heightMap.size();
        if (n < 3) return 0;
        int m = heightMap[0].size();
        if (m < 3) return 0;
        vector<vector<bool>> visited(n, vector<bool>(m));
        priority_queue<Node> pq;
        for (int i = 0; i < n; i++) {
            pq.push(Node(i, 0, heightMap[i][0]));
            visited[i][0] = true;
            pq.push(Node(i, m - 1, heightMap[i][m - 1]));
            visited[i][m - 1] = true;
        }
        for (int i = 1; i < m - 1; i++) {
            pq.push(Node(0, i, heightMap[0][i]));
            visited[0][i] = true;
            pq.push(Node(n - 1, i, heightMap[n - 1][i]));
            visited[n - 1][i] = true;
        }
        int maxx = INT_MIN;
        int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
        int res = 0;
        while (!pq.empty()) {
            auto node = pq.top();
            pq.pop();
            if (maxx < node.h) maxx = node.h;
            for (int i = 0; i < 4; i++) {
                int x = node.x + dx[i], y = node.y + dy[i];
                if (x < 0 || x >= n || y < 0 || y >= m) continue;
                if (visited[x][y]) continue;
                visited[x][y] = true;
                if (heightMap[x][y] < maxx) res += maxx - heightMap[x][y];
                pq.push(Node(x, y, heightMap[x][y]));
            }
        }
        return res;
    }
};
