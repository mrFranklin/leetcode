class Solution {
public:
    // mine
    vector<int> spiralOrder1(vector<vector<int>>& matrix) {
        vector<int> res;
        int n = matrix.size();
        if (n == 0 || matrix[0].size() == 0) return res;
        int m = matrix[0].size();
        vector<vector<bool>> vis(n, vector<bool>(m, false));

        int i = 0, j = 0, count = n * m;
        int dir = 0; // 0右，1下，2左，3上
        while (i >= 0 && i < n && j >= 0 && j < m) {
            int d = matrix[i][j];
            vis[i][j] = true;
            if (dir == 0) {
                if (j+1 == m || j+1 < m && vis[i][j+1]) {
                    dir++;
                } else {
                    res.push_back(d);
                    j++;
                    count--;
                }
            } else if (dir == 1) {
                if (i+1 == n || i+1 < n && vis[i+1][j]) {
                    dir++;
                } else {
                    res.push_back(d);
                    i++;
                    count--;
                }
            } else if (dir == 2) {
                if (j == 0 || j-1 >= 0 && vis[i][j-1]) {
                    dir++;
                } else {
                    res.push_back(d);
                    j--;
                    count--;
                }
            } else if (dir == 3) {
                if (i == 0 || i-1 >= 0 && vis[i-1][j]) {
                    dir = (dir + 1) % 4;
                } else {
                    res.push_back(d);
                    i--;
                    count--;
                }
            }
            if (count == 1) break;
        }
        res.push_back(matrix[i][j]);

        return res;
    }
    
    // from yxc
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if (matrix.empty()) return res;
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
        int x = 0, y = 0, d = 1;
        for (int k = 0; k < n * m; k++) {
            res.push_back(matrix[x][y]);
            vis[x][y] = true;

            int a = x + dx[d], b = y + dy[d];
            if (a < 0 || a >= n || b < 0 || b >= m || vis[a][b]) {
                d = (d + 1) % 4;
                a = x + dx[d], b = y + dy[d];
            }
            x = a, y = b;
        }
        return res;
    }
};
