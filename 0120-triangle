class Solution {
public:
    int minimumTotal1(vector<vector<int>>& triangle) {
        if (triangle.size() == 0 || triangle[0].size() == 0) return 0;
        int n = triangle.size();
        vector<vector<long long>> f(n, vector<long long>(n));
        f[0][0] = triangle[0][0];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                f[i][j] = LONG_MAX;
                if (j > 0) f[i][j] = min(f[i][j], f[i - 1][j - 1]);
                if (j < i) f[i][j] = min(f[i][j], f[i - 1][j]);
                f[i][j] += triangle[i][j];
            }
        }
        long long res = LONG_MAX;
        for (int i = 0; i < n; i++) {
            res = min(res, f[n-1][i]);
        }
        return res;
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        if (triangle.size() == 0 || triangle[0].size() == 0) return 0;
        int n = triangle.size();
        vector<int> f(n, INT_MAX);
        f[0] = triangle[0][0];
        for (int i = 1; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                if (j > 0) f[j] = min(f[j], f[j - 1]);
                if (j < i - 1) f[j] = min(f[j], f[j]);
                f[j] += triangle[i][j];
            }
        }
        int res = INT_MAX;
        for (int i = 0; i < f.size(); i++) {
            res = min(res, f[i]);
        }
        return res;
    }
};
