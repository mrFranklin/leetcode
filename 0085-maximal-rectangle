class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        // 加入两个哨兵，写起来简单很多
        heights.insert(heights.begin(), 0);
        heights.push_back(0);
        int n = heights.size();
        int res = 0;
        stack<int> st;
        st.push(0);
        for (int i = 1; i < n; i++) {
            int j = st.top();
            while (heights[j] > heights[i]) {
                st.pop();
                res = max(res, heights[j] * (i - st.top() - 1));
                j = st.top();
            }
            st.push(i);
        }
        return res;
    }

    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.size() == 0) return 0;
        int n = matrix.size(), m = matrix[0].size();
        vector<vector<int>> f(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == '0') {
                    f[i][j] = 0;
                    continue;
                }
                f[i][j] = 1 + (i == 0 ? 0 : f[i - 1][j]);
            }
        }
        int res = 0;
        for (int i = 0; i < f.size(); i++) {
            res = max(res, largestRectangleArea(f[i]));
        }
        return res;
    }
};
