/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 前缀和 + dfs + 回溯
    void dfs(TreeNode* root, int sum, unordered_map<int, int> &cache, int presum, int &count) {
        if (root == NULL) return;

        if (cache.count(presum + root->val - sum)) {
            count += cache[presum + root->val - sum];
        }
        cache[presum + root->val]++;
        if (root->left) {
            dfs(root->left, sum, cache, presum + root->val, count);
        }
        if (root->right) {
            dfs(root->right, sum, cache, presum + root->val, count);
        }
        if (--cache[presum + root->val] == 0) {
            cache.erase(presum + root->val);
        };
    }
    int pathSum(TreeNode* root, int sum) {
        int count = 0;
        unordered_map<int, int> cache;
        cache[0] = 1;
        dfs(root, sum, cache, 0, count);
        return count;
    }
};
