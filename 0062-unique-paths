class Solution {
public:
    // dp，二维
    int uniquePaths1(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 1));
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
    // dp, 优化空间复杂度
    int uniquePaths(int m, int n) {
        vector<int> dp(n, 1);
        // for (int i = 0; i < n; i++) {
        //     dp[i] = 1;
        // }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[j] += dp[j-1];
            }
        }

        return dp[n-1];
    }
    // 
    long long factorial(int n, int count) {
        long long res = 1;
        while (count > 0) {
            res *= n;
            count--;
        }
        cout<<res<<endl;
        return res;
    }
    // 排列组合问题，从m+n-2步中选n-1步，C(m-n-2, n-1)
    // 不过用c语言会导致overflow，long long的数值上限太小了!!
    int uniquePaths2(int m, int n) {
        return (int)(factorial(m + n - 2, m - 1) / factorial(n - 1, n - 1));
    }
};
