struct heap {
    vector<int> c;
    void push(int x) {
        c.push_back(x);
        int i = c.size() - 1;
        while (i > 0) {
            int par = (i - 1) / 2;
            if (c[par] > c[i]) swap(c[par], c[i]);
            i = par;
        }
    }

    void pop() {
        if (c.size() == 0) return;
        int maxx = c.size() - 1;
        swap(c[0], c[maxx]);
        int i = 0;
        while (true) {
            int maxp = i;
            int lc = 2 * i + 1, rc = 2 * i + 2;
            if (lc < maxx && c[lc] < c[i]) maxp = lc;
            if (rc < maxx && c[rc] < c[maxp]) maxp = rc;
            if (maxp == i) break;
            swap(c[maxp], c[i]);
            i = maxp;
        }
        c.pop_back();
    }

    int size() {
        return c.size();
    }

    int top() {
        if (c.size() == 0) return -1;
        return c[0];
    }
};

class Solution {
public:
    int partiton(vector<int>& nums, int start, int end) {
        // 随机选择pivot
        int r = rand() % (end - start + 1) + start;
        swap(nums[r], nums[end]);

        int pivot = nums[end];
        int i = start, j = start;
        while (j < end) {
            if (nums[j] < pivot) {
                swap(nums[i++], nums[j++]);
            } else {
                j++;
            }
        }
        swap(nums[i], nums[end]);
        return i;
    }

    int quickSelect(vector<int>& nums, int k, int start, int end) {
        if (start == end) {
            return nums[start];
        }
        int pivot = partiton(nums, start, end);
        int n = nums.size();
        if (pivot == n - k) {
            return nums[pivot];
        } else if (pivot < n - k) {
            return quickSelect(nums, k, pivot+1, end);
        } else {
            return quickSelect(nums, k, start, pivot-1);
        }
    }

    // 快速选择法
    int findKthLargest2(vector<int>& nums, int k) {
        srand(time(0));
        if (k <= 0 || nums.size() <= 0) {
            return -1;
        }
        int start = 0;
        int end = nums.size() - 1;
        k = nums.size() - k;
        while (start <= end) {
            int pivot = partiton(nums, start, end);
            if (pivot == k) {
                return nums[pivot];
            } else if (pivot < k) {
                start = pivot + 1;
            } else {
                end = pivot - 1;
            }
        }
        return nums[start];
    }

    // 小顶堆
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int> > pq;
        
        for (int i = 0; i < nums.size(); i++) {
            if (pq.size() < k) {
                pq.push(nums[i]);
            } else if (pq.top() < nums[i]) {
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }

};
