class Solution {
public:
    // greedy
    // 把所有上涨天数的股票价值都包含进来
    int maxProfit1(vector<int>& prices) {
        int res = 0;
        int n = prices.size();
        for (int i = 1; i < n; i++) {
            if (prices[i] > prices[i - 1]) {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }

    // dp
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) return 0;
        // 0: 持有现金，1：持有股票
        vector<vector<int>> f(n, vector<int>(2));
        f[0][0] = 0, f[0][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            f[i][0] = max(f[i - 1][0], f[i - 1][1] + prices[i]);
            f[i][1] = max(f[i - 1][1], f[i - 1][0] - prices[i]);
        }
        return f[n - 1][0];
    }
};
