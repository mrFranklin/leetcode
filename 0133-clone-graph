/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
private:
    unordered_map<Node*, Node*> vis;

public:
    Node* cloneGraph(Node* node) {
        if (node == NULL) return NULL;
        if (vis.count(node)) return vis[node];

        Node* res = new Node(node->val);
        vis[node] = res;
        for (int i = 0; i < node->neighbors.size(); i++) {
            res->neighbors.push_back(cloneGraph(node->neighbors[i]));
        }
        return res;
    }
};
