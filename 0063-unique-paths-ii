class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        if (n <= 0) return 0;
        int m = obstacleGrid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        for (int i = 0; i < obstacleGrid.size(); i++) {
            for (int j = 0; j < m; j++) {
                if (obstacleGrid[i][j] == 1) continue;
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                // 下面的判断多余了，因为上面判断了为1的情况，dp此时一定为0
                // int left = 0, up = 0;
                // if (j > 0 && obstacleGrid[i][j - 1] != 1) left = dp[i][j - 1];
                // if (i > 0 && obstacleGrid[i - 1][j] != 1) up = dp[i - 1][j];
                // dp[i][j] = left + up;

                if (j > 0) dp[i][j] += dp[i][j - 1];
                if (i > 0) dp[i][j] += dp[i - 1][j];
            }
        }
        return dp[n - 1][m - 1];
    }
};
