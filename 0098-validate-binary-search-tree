/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root, long low, long high) {
        if (root == NULL) return true;
        if (root->val <= low || root->val >= high) {
            return false;
        }
        return isValidBST(root->left, low, root->val) && isValidBST(root->right, root->val, high);
    }
    // 递归
    bool isValidBST1(TreeNode* root) {
        return isValidBST(root, LONG_MIN, LONG_MAX);
    }

    // 中序遍历！！！
    bool isValidBST(TreeNode* root) {
        stack<TreeNode*> st;
        auto p = root;
        // TreeNode *pre = NULL;
        long pre = LONG_MIN;
        while (p || !st.empty()) {
            while (p) {
                st.push(p);
                p = p->left;
            }
            auto node = st.top();
            st.pop();
            if (pre >= node->val) {
                return false;
            }
            pre = node->val;
            p = node->right;
        }
        return true;
    }
};
