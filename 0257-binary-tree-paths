/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, vector<int>& mem, vector<string>& ans) {
        mem.push_back(root->val);
        if (root->left == NULL && root->right == NULL) {
            if (mem.size() > 0) {
                string s;
                for (int i = 0; i < mem.size(); i++) {
                    s += to_string(mem[i]) + (i == mem.size() - 1 ? "" : "->");
                }
                ans.push_back(s);
            }
        } else {
            if (root->left) dfs(root->left, mem, ans);
            if (root->right) dfs(root->right, mem, ans);
        }
        mem.pop_back();
    }

    vector<string> binaryTreePaths(TreeNode* root) {
        if (root == NULL) return {};
        vector<string> ans;
        vector<int> mem;
        dfs(root, mem, ans);
        return ans;
    }
};
