class Solution {
public:
    void dfs(string& s, int start, string& odd, vector<string>& res) {
        if (start == s.size()) {
            string rs = s + odd;
            for (int i = s.size() - 1; i >= 0; i--) {
                rs += s[i];
            }
            res.push_back(rs);
            return;
        }
        unordered_set<char> visited;
        for (int i = start; i < s.size(); i++) {
            if (visited.count(s[i])) continue;
            visited.insert(s[i]);

            swap(s[start], s[i]);
            dfs(s, start + 1, odd, res);
            swap(s[start], s[i]);
        }
    }

    // dfs遍历一半字符串即可
    vector<string> generatePalindromes(string s) {
        int n = s.size();
        unordered_map<char, int> mp;
        for (int i = 0; i < n; i++) mp[s[i]]++;
        string odd;
        string t;
        for (auto c : mp) {
            if (c.second % 2 == 1) {
                if (odd.empty()) odd += c.first;
                else return {};
            }
            for (int i = 0; i < c.second / 2; i++) {
                t += c.first;
            }
        }
        vector<string> res;
        dfs(t, 0, odd, res);
        return res;
    }
};
