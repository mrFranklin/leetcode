class Solution {
public:
    // 递归超时，需加记忆化搜索！！
    bool check(string& s1, int l1, string& s2, int l2, string& s3, int l3, vector<vector<vector<int>>>& mem) {
        // cout << s1 << l1 << s2 << l2 << s3 << l3 <<endl;
        if (mem[l1][l2][l3] != 0) return mem[l1][l2][l3] == 1 ? true : false;
        bool res;
        if (l1 >= s1.size()) {
            res = s2.substr(l2) == s3.substr(l3);
            mem[l1][l2][l3] = res ? 1 : -1;
            return res;
        } 
        if (l2 >= s2.size()) {
            res = s1.substr(l1) == s3.substr(l3);
            mem[l1][l2][l3] = res ? 1 : -1;
            return res;
        }
        if (s3[l3] != s1[l1] && s3[l3] != s2[l2]) return false;
        if (s3[l3] == s1[l1] && s3[l3] == s2[l2]) {
            res = check(s1, l1 + 1, s2, l2, s3, l3 + 1, mem) || check(s1, l1, s2, l2 + 1, s3, l3 + 1, mem);
        } else if (s3[l3] == s1[l1]) {
            res = check(s1, l1 + 1, s2, l2, s3, l3 + 1, mem);
        } else {
            res = check(s1, l1, s2, l2 + 1, s3, l3 + 1, mem);
        }
        mem[l1][l2][l3] = res ? 1 : -1;
        return res;
    }
    // 记忆化搜索
    bool isInterleave1(string s1, string s2, string s3) {
        if (s1.size() + s2.size() != s3.size()) return false;
        string tmp1 = s1 + s2, tmp2 = s3;
        sort(tmp1.begin(), tmp1.end());
        sort(tmp2.begin(), tmp2.end());
        if (tmp1 != tmp2) return false;

        vector<vector<vector<int>>> mem(s1.size() + 1, vector<vector<int>>(s2.size() + 1, vector<int>(s3.size() + 1)));
        return check(s1, 0, s2, 0, s3, 0, mem);
    }

    // dp, 可优化成一维
    bool isInterleave(string s1, string s2, string s3) {
        if (s1.size() + s2.size() != s3.size()) return false;
        string tmp1 = s1 + s2, tmp2 = s3;
        sort(tmp1.begin(), tmp1.end());
        sort(tmp2.begin(), tmp2.end());
        if (tmp1 != tmp2) return false;

        int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();
        vector<vector<bool>> f(n1 + 1, vector<bool>(n2 + 1));
        f[0][0] = true;
        for (int i = 1; i <= n1; i++) {
            f[i][0] = f[i - 1][0] && s1[i - 1] == s3[i - 1];
        }
        for (int i = 1; i <= n2; i++) {
            f[0][i] = f[0][i - 1] && s2[i - 1] == s3[i - 1];
        }
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                f[i][j] = f[i - 1][j] && s1[i - 1] == s3[i + j - 1] || f[i][j - 1] && s2[j - 1] == s3[i + j - 1];
            }
        }
        return f[n1][n2];
    }
};
