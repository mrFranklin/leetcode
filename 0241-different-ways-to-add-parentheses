class Solution {
public:
    vector<int> dfs(vector<int> &nums, vector<char> &ops, int start, int end, vector<vector<vector<int>>> &record) {
        auto &res = record[start][end];
        if (!res.empty()) return res; // 记忆化递归
        if (start == end) res = {nums[start]};

        for (int i = start; i < end; i++) {
            char op = ops[i];
            auto left = dfs(nums, ops, start, i, record);
            auto right = dfs(nums, ops, i + 1, end, record);
            for (auto lr : left) {
                for (auto rr : right) {
                    if (op == '+') res.push_back(lr + rr);
                    else if (op == '-') res.push_back(lr - rr);
                    else if (op == '*') res.push_back(lr * rr);
                }
            }
        }

        return res;
    }

    vector<int> diffWaysToCompute(string input) {
        vector<int> nums;
        vector<char> ops;
        int num = 0;
        for (int i = 0; i < input.size(); i++) {
            char c = input[i];
            if (c == '+' || c == '-' || c == '*') {
                nums.push_back(num);
                ops.push_back(c);
                num = 0;
            } else {
                num = num * 10 + (c - '0');
            }
        }
        nums.push_back(num);
        vector<vector<vector<int>>> record(nums.size(), vector<vector<int>>(nums.size()));
        return dfs(nums, ops, 0, nums.size() - 1, record);
    }
};
