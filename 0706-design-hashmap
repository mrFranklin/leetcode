class Node {
public:
    Node *next;
    int key;
    int value;
    Node(int key, int value) {
        this->key = key;
        this->value = value;
        this->next = NULL;
    }
};

class MyHashMap {

public:
    vector <Node*> vec;
    int size;

    /** Initialize your data structure here. */
    MyHashMap() {
        size = 1000;
        vec = vector<Node*>(size);
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        int index = key % size;
        if (vec[index] == NULL) {
            vec[index] = new Node(key, value);
        } else {
            if (vec[index]->key == key) {
                vec[index]->value = value;
                return;
            }
            Node *p = vec[index];
            while (p->next != NULL) {
                if (p->next->key == key) {
                    p->next->value = value;
                    return;
                }
                p = p->next;
            }
            p->next = new Node(key, value);
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        int index = key % size;
        if (vec[index] != NULL) {
            Node *p = vec[index];
            while (p != NULL) {
                if (p->key == key) {
                    return p->value;
                }
                p = p->next;
            }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        int index = key % size;
        if (vec[index] != NULL) {
            if (vec[index]->key == key) {
                vec[index] = vec[index]->next;
                return;
            }
            Node *pre = vec[index];
            Node *p = vec[index]->next;
            while (p != NULL) {
                if (p->key == key) {
                    pre->next = p->next;
                    return;
                }
                pre = p;
                p = p->next;
            }
        }
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
