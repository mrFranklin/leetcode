class Solution {
public:
    vector<int> mem;
    int tot;

    void dfs(int st, int k, int sum, vector<vector<int>>& ans) {
        if (k == 0) {
            if (sum == tot) ans.push_back(mem);
            return;
        }
        for (int i = st; i <= 9; i++) {
            mem.push_back(i);
            if (sum + i <= tot) dfs(i + 1, k - 1, sum + i, ans);
            mem.pop_back();
        }
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        if (n <= 0 || k <= 0 || k > 9 || k * (k + 1) / 2 > n || k * (19 - k) / 2 < n) return {};
        tot = n;
        vector<vector<int>> ans;
        dfs(1, k, 0, ans);
        return ans;
    }
};
