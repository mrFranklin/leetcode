class Solution {
public:
    // 前缀和，超时
    int subarraySum1(vector<int>& nums, int k) {
        vector<int> presum;
        presum.push_back(0);
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            presum.push_back(presum.back() + nums[i]);
        }
        for (int i = 1; i <= nums.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (presum[i] - presum[j] == k) {
                    count++;
                }
            }
        }
        return count;
    }

    // 前缀和，用map统计前缀和的数量
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> presum;
        presum[0] = 1;
        int count = 0;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            int pre = sum - k;
            if (presum.count(pre)) {
                count += presum[pre];
            }
            presum[sum]++;
        }
        return count;
    }
};
