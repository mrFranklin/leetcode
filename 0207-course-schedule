class Solution {
public:
    // karn/bfs
    bool canFinish1(int numCourses, vector<vector<int>>& prerequisites) {
        int indegree[numCourses];
        memset(indegree, 0, sizeof(indegree));
        vector<int> adj[numCourses];
        for (int i = 0; i < prerequisites.size(); i++) {
            vector<int> pre = prerequisites[i];
            indegree[pre[0]]++;
            adj[pre[1]].push_back(pre[0]);
        }
        queue<int> q;
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            --numCourses;
            for (int i = 0; i < adj[v].size(); i++) {
                if (--indegree[adj[v][i]] == 0) {
                    q.push(adj[v][i]);
                }
            }
        }

        return numCourses == 0;
    }

    
    
    bool dfs(int v, vector<int> adj[], int visited[]) {
        if (visited[v] == 1) return false; // 已被当前遍历访问过，说明存在环
        if (visited[v] == -1) return true;
        visited[v] = 1;
        for (int i = 0; i < adj[v].size(); i++) {
            if (!dfs(adj[v][i], adj, visited)) {
                return false;
            }
        }
        visited[v] = -1;
        return true;
    }
    // dfs
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int visited[numCourses]; // -1, 0, 1
        memset(visited, 0, sizeof(visited));
        vector<int> adj[numCourses];
        for (int i = 0; i < prerequisites.size(); i++) {
            vector<int> pre = prerequisites[i];
            adj[pre[1]].push_back(pre[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (adj[i].size() == 0) {
                continue;
            }
            if (!dfs(i, adj, visited)) {
                return false;
            }
        }
        return true;
    }
};  
