class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        if (k <= 0) {
            return 0;
        }
        unordered_map<char, int> window;        
        int left = 0, right = 0;
        int len = 0;
        while (right < s.size()) {
            char c = s[right];
            if (window.size() == k && !window.count(c)) { // 已满，先处理
                while (window.size() == k) {
                    if (right - left > len) {
                        len = right - left;
                    }
                    c = s[left++];
                    window[c]--;
                    if (window[c] == 0) {
                        window.erase(c);
                    }
                }
            } else {
                window[c]++;
                right++;
            }
        }
        if (right - left >  len) {
            len = right - left;
        }
        return len;
    }
};
