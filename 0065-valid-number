class Solution {
public:
    bool isDigital(char c) {
        return c >= '0' && c <= '9';
    }
    bool isOp(char c) {
        return c == '+' || c == '-';
    }
    // bad!
    bool isNumber1(string s) {
        // 先去掉左右空字符
        s.erase(s.find_last_not_of(' ') + 1);
        s.erase(0, s.find_first_not_of(' '));
        int n = s.size();
        if (n == 0) return false;
        // cout<<n<<endl;
        for (int i = 0; i < n; i++) {
            if (isDigital(s[i])) continue;
            else if (s[i] == 'e') {
                // e前面为数字
                if (i == 0 || !isDigital(s[i - 1]) && s[i - 1] != '.' || i < n - 1 && !isDigital(s[i + 1]) && !isOp(s[i + 1]) || i == n - 1) return false;
                int j = i - 1;
                for (; j >= 0; j--) {
                    if (!isDigital(s[j]) && !isOp(s[j])) break;
                }
                // 3e2e5 非法
                if (j >= 0 && s[j] == 'e') return false;
            } else if (isOp(s[i])) {
                // +/-前面可以为e，后面为数字
                if (i > 0 && !(s[i - 1] == 'e') || i < n - 1 && !isDigital(s[i + 1]) && !(s[i + 1] == '.') || i == n - 1) return false;
            } else if (s[i] == '.') {
                // 小数点左右为数字, 例外：.5  5.  合法
                if (i > 0 && !isDigital(s[i - 1]) && !isOp(s[i - 1]) && s[i - 1] != 'e' || i < n - 1 && !isDigital(s[i + 1]) && s[i + 1] != 'e') {
                    cout<<"."<<endl;
                    return false;
                }
                // warn "."非法
                if (n == 1) return false;
                // +. .+ 非法
                if (i == 0 && !isDigital(s[i + 1]) || i == n - 1 && !isDigital(s[i - 1])) return false;
                int j = i - 1;
                for (; j >= 0; j--) {
                    if (!isDigital(s[j]) && !isOp(s[j])) break;
                }
                // 99e2.5 非法, 2.3.5 非法
                if (j >= 0 && (s[j] == 'e' || s[j]== '.')) return false;
            } else {
                return false;
            }
        }

        return true;
    }

    // from solution, dfn
    bool isNumber(string s) {
        if(s.empty()) return false;
        int n = s.size();

        int state = 0;
        vector<bool> finals({0, 0, 0, 1, 0, 1, 1, 0, 1}); // 合法的终止状态
        vector<vector<int> > transfer({
                {0,  1,  6,  2,  -1, -1},
                {-1, -1, 6,  2,  -1, -1},
                {-1, -1, 3,  -1, -1, -1},
                {8,  -1, 3,  -1, 4,  -1},
                {-1, 7,  5,  -1, -1, -1},
                {8,  -1, 5,  -1, -1, -1},
                {8,  -1, 6,  3,  4,  -1},
                {-1, -1, 5,  -1, -1, -1},
                {8,  -1, -1, -1, -1, -1},
                });

        for(int i = 0; i < n; ++i)
        {
            state = transfer[state][_make(s[i])];
            if(state < 0) return false;
        }
        return finals[state];
    }

private:
    int _make(const char& c)
    {
        switch(c)
        {
            case ' ': return 0;
            case '+': return 1;
            case '-': return 1;
            case '.': return 3;
            case 'e': return 4;
            default: return _number(c);
        }
    }

    int _number(const char& c)
    {
        if(c >= '0' && c <= '9')
            return 2;
        else
            return 5;
    }
};
