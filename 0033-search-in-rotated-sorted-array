class Solution {
public:
    // ugly
    int search1(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        int mid;
        while (left <= right) {
            mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] > target) {
                int m = mid;
                while (m > left && nums[m] > nums[m - 1]) {
                    m--;
                }
                if (m == left) {
                    if (nums[left] == target) return left;
                    else if (nums[left] < target) right = mid - 1;
                    else left = mid + 1;
                } else {
                    if (nums[m] == target) return m;
                    else if (nums[m] < target) left = m + 1, right = mid - 1;
                    else return -1;
                }
            } else {
                int m = mid;
                while (m < right && nums[m] < nums[m + 1]) {
                    m++;
                }
                if (m == right) {
                    if (nums[right] == target) return right;
                    else if (nums[right] < target) right = mid - 1;
                    else left = mid + 1;
                } else {
                    if (nums[m] == target) return m;
                    else if (nums[m] < target) return -1;
                    else left = mid + 1, right = m - 1;
                }
            }
        }
        return -1;
    }

    // better
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1;
        int mid;
        while (left <= right) {
            mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[0] <= nums[mid]) { // 左侧有序
                if (nums[mid] > target && nums[0] <= target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else { // 右侧有序
                if (nums[mid] < target && nums[n - 1] >= target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
};
